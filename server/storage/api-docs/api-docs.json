{
    "openapi": "3.0.0",
    "info": {
        "title": " OpenApi Documentation",
        "description": " Swagger OpenApi description",
        "contact": {
            "email": "admin@admin.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://my-default-host.com",
            "description": " API Server"
        }
    ],
    "paths": {
        "/api/register": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Register an user",
                "description": "Register with email and password",
                "operationId": "a718f172ff3ac464d723835815f8fb57",
                "requestBody": {
                    "description": "pass user credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "name",
                                    "birthdate",
                                    "password",
                                    "c_password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "user1"
                                    },
                                    "birthdate": {
                                        "type": "string",
                                        "format": "date",
                                        "example": "2000-10-11"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MotdePasse"
                                    },
                                    "c_password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MotdePasse"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "422": {
                        "description": "Wrong credentials response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Errors"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": [
                                                    "The email field is required",
                                                    "The email must be a valid email address"
                                                ]
                                            },
                                            "collectionFormat": "multi"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Connexion de l'utilisateur",
                "description": "Connectez-vous en tant qu'utilisateur",
                "operationId": "44212a9096e4b09358281e9ec8a0701d",
                "requestBody": {
                    "description": "Saisissez les informations de connexion de l'utilisateur",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email",
                                    "password"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "MotDePasse"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Utilisateur connecté avec succès"
                    },
                    "401": {
                        "description": "E-mail ou mot de passe incorrect",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "example": "Non autorisé"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/verify-email/{token}": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Vérification de l'e-mail",
                "description": "Vérifiez l'e-mail de l'utilisateur en utilisant un jeton",
                "operationId": "93c8c1f0d65a6b49b063ce6b85438304",
                "responses": {
                    "200": {
                        "description": "E-mail vérifié avec succès"
                    },
                    "401": {
                        "description": "Non autorisé"
                    }
                }
            }
        },
        "/api/send-password-reset-email": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Send Password Reset Email",
                "description": "Send a password reset email to the user",
                "operationId": "b17c90a737cc813862dfe1724defc12c",
                "requestBody": {
                    "description": "Provide user email for password reset",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "email"
                                ],
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset email sent successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Error"
                                        },
                                        "errors": {
                                            "properties": {
                                                "field_name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The field is required",
                                                            "The field must be a valid email address"
                                                        ]
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/reset-password": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Reset Password",
                "description": "Reset user password using a token",
                "operationId": "c8051546add6ded950f79e0f2f64a021",
                "requestBody": {
                    "description": "Provide user token, email, and new password",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "token",
                                    "email",
                                    "password",
                                    "c_password"
                                ],
                                "properties": {
                                    "token": {
                                        "type": "string",
                                        "example": "reset_token"
                                    },
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "example": "user1@mail.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "NewPassword"
                                    },
                                    "c_password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "NewPassword"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successfully"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Error"
                                        },
                                        "errors": {
                                            "properties": {
                                                "field_name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The field is required",
                                                            "The field must be at least 8 characters",
                                                            "The field must match the password field"
                                                        ]
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "User not found"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Internal Server Error"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/update-profile": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Mettre à jour le profil de l'utilisateur",
                "description": "Cette API permet à l'utilisateur connecté de mettre à jour son profil en modifiant son nom, sa date de naissance et son adresse e-mail.",
                "operationId": "updateProfile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "Nom de l'utilisateur",
                                        "type": "string",
                                        "example": "John Doe"
                                    },
                                    "birthdate": {
                                        "description": "Date de naissance de l'utilisateur (au format 'AAAA-MM-JJ')",
                                        "type": "string",
                                        "format": "date",
                                        "example": "1990-05-15"
                                    },
                                    "email": {
                                        "description": "Nouvelle adresse e-mail de l'utilisateur",
                                        "type": "string",
                                        "format": "email",
                                        "example": "john@example.com"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profil mis à jour avec succès"
                    },
                    "400": {
                        "description": "Erreur de validation ou adresse e-mail déjà utilisée par un autre utilisateur"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/bars/{latitude}&{longitude}&{radius}": {
            "get": {
                "tags": [
                    "Bars"
                ],
                "summary": "Get a list of bars within a certain radius.",
                "operationId": "getBars",
                "parameters": [
                    {
                        "name": "latitude",
                        "in": "path",
                        "description": "Latitude",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "path",
                        "description": "Longitude",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "radius",
                        "in": "path",
                        "description": "Search radius in kilometers",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/bars/{bar}": {
            "get": {
                "tags": [
                    "Bars"
                ],
                "summary": "Get details of a specific bar.",
                "operationId": "getBar",
                "parameters": [
                    {
                        "name": "bar",
                        "in": "path",
                        "description": "Bar ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "404": {
                        "description": "Bar not found"
                    }
                }
            }
        },
        "/api/bars-search/{latitude}&{longitude}&{name}": {
            "get": {
                "tags": [
                    "Bars"
                ],
                "summary": "Search bars by name within a certain radius.",
                "operationId": "searchBars",
                "parameters": [
                    {
                        "name": "latitude",
                        "in": "path",
                        "description": "Latitude",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "longitude",
                        "in": "path",
                        "description": "Longitude",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "format": "float"
                        }
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name to search for",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation"
                    },
                    "400": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/api/bar-opinions/{barId}": {
            "get": {
                "tags": [
                    "Bar Opinions"
                ],
                "summary": "Get Bar Opinions by Bar ID",
                "operationId": "getBarOpinions",
                "parameters": [
                    {
                        "name": "barId",
                        "in": "path",
                        "description": "ID of the Bar to retrieve opinions for",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bar Opinions retrieved successfully"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/bar-opinions": {
            "post": {
                "tags": [
                    "Bar Opinions"
                ],
                "summary": "Create a new Bar Opinion",
                "operationId": "storeBarOpinion",
                "requestBody": {
                    "description": "Bar Opinion data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "bar_id": {
                                        "description": "ID of the Bar",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "opinion": {
                                        "description": "Opinion text",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "BarOpinion created successfully"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/bar-opinions/{barOpinion}": {
            "put": {
                "tags": [
                    "Bar Opinions"
                ],
                "summary": "Update a Bar Opinion",
                "operationId": "updateBarOpinion",
                "parameters": [
                    {
                        "name": "barOpinion",
                        "in": "path",
                        "description": "ID of the Bar Opinion to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Bar Opinion data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "opinion": {
                                        "description": "Updated opinion text",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "BarOpinion updated successfully"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Bar Opinions"
                ],
                "summary": "Delete a Bar Opinion",
                "operationId": "deleteBarOpinion",
                "parameters": [
                    {
                        "name": "barOpinion",
                        "in": "path",
                        "description": "ID of the Bar Opinion to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "BarOpinion deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/baraton-bars": {
            "post": {
                "tags": [
                    "BaratonBars"
                ],
                "summary": "Create a new Baraton Bar",
                "operationId": "storeBaratonBar",
                "requestBody": {
                    "description": "Baraton Bar data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "baraton_id": {
                                        "description": "ID of the Baraton",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "bar_id": {
                                        "description": "ID of the Bar",
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Baraton Bar created successfully"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/baraton-bars/{baratonBar}": {
            "get": {
                "tags": [
                    "BaratonBars"
                ],
                "summary": "Get details of a Baraton Bar",
                "operationId": "showBaratonBar",
                "parameters": [
                    {
                        "name": "baratonBar",
                        "in": "path",
                        "description": "ID of the Baraton Bar to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Baraton Bar details retrieved successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "BaratonBars"
                ],
                "summary": "Update a Baraton Bar",
                "operationId": "updateBaratonBar",
                "parameters": [
                    {
                        "name": "baratonBar",
                        "in": "path",
                        "description": "ID of the Baraton Bar to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Baraton Bar data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "baraton_id": {
                                        "description": "ID of the Baraton",
                                        "type": "integer",
                                        "format": "int64"
                                    },
                                    "bar_id": {
                                        "description": "ID of the Bar",
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Baraton Bar updated successfully"
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "passport": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "BaratonBars"
                ],
                "summary": "Delete a Baraton Bar",
                "operationId": "destroyBaratonBar",
                "parameters": [
                    {
                        "name": "baratonBar",
                        "in": "path",
                        "description": "ID of the Baraton Bar to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Baraton Bar deleted successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/baratons": {
            "get": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Get a list of baratons",
                "description": "Display a listing of the resource.",
                "operationId": "getBaratons",
                "responses": {
                    "200": {
                        "description": "List of baratons"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Create a new Baraton",
                "description": "Create a new Baraton with name, time, radius, and city",
                "operationId": "5c8b328c36a85cf044e3e1efed70ab7c",
                "requestBody": {
                    "description": "Baraton data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "time",
                                    "radius",
                                    "city"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Baraton Name"
                                    },
                                    "time": {
                                        "type": "string",
                                        "example": "Event Time"
                                    },
                                    "radius": {
                                        "type": "string",
                                        "example": "Event Radius"
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "Event City"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Baraton created successfully",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation errors",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": "false"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Errors"
                                        },
                                        "data": {
                                            "properties": {
                                                "name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The name field is required"
                                                        ]
                                                    },
                                                    "collectionFormat": "multi"
                                                },
                                                "time": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The time field is required"
                                                        ]
                                                    },
                                                    "collectionFormat": "multi"
                                                },
                                                "radius": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The radius field is required"
                                                        ]
                                                    },
                                                    "collectionFormat": "multi"
                                                },
                                                "city": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": [
                                                            "The city field is required"
                                                        ]
                                                    },
                                                    "collectionFormat": "multi"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/baratons/{baraton}/bars": {
            "get": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Get Baraton Bars",
                "operationId": "getBaratonBars",
                "parameters": [
                    {
                        "name": "baraton",
                        "in": "path",
                        "description": "ID of the Baraton",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Baraton Bars retrieved successfully"
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        },
        "/api/baratons/{baraton}": {
            "get": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Get a specific baraton",
                "description": "Show the specified resource.",
                "operationId": "getBaraton",
                "parameters": [
                    {
                        "name": "baraton",
                        "in": "path",
                        "description": "ID of the baraton to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Baraton details"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Update a specific baraton",
                "description": "Update the specified resource in storage.",
                "operationId": "updateBaraton",
                "parameters": [
                    {
                        "name": "baraton",
                        "in": "path",
                        "description": "ID of the baraton to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Baraton data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "time",
                                    "radius",
                                    "city"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Baraton Name"
                                    },
                                    "time": {
                                        "type": "string",
                                        "example": "Event Time"
                                    },
                                    "radius": {
                                        "type": "string",
                                        "example": "Event Radius"
                                    },
                                    "city": {
                                        "type": "string",
                                        "example": "Event City"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Baraton updated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation error"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Baratons"
                ],
                "summary": "Delete a specific baraton",
                "description": "Remove the specified resource from storage.",
                "operationId": "deleteBaraton",
                "parameters": [
                    {
                        "name": "baraton",
                        "in": "path",
                        "description": "ID of the baraton to delete",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Baraton deleted successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/favorite-bars": {
            "get": {
                "tags": [
                    "FavoriteBars"
                ],
                "summary": "Get a list of FavoriteBars",
                "description": "Display a listing of the resource.",
                "operationId": "getFavoriteBars",
                "responses": {
                    "200": {
                        "description": "List of FavoriteBars"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "FavoriteBars"
                ],
                "summary": "Store a new FavoriteBar",
                "description": "Store a newly created resource in storage.",
                "operationId": "storeFavoriteBar",
                "requestBody": {
                    "description": "FavoriteBar data",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "bar_id"
                                ],
                                "properties": {
                                    "bar_id": {
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "FavoriteBar created successfully"
                    },
                    "400": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Validation Error"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/favorite-bars/{favoriteBar}": {
            "delete": {
                "tags": [
                    "FavoriteBars"
                ],
                "summary": "Delete a FavoriteBar",
                "description": "Remove the specified resource from storage.",
                "operationId": "destroyFavoriteBar",
                "parameters": [
                    {
                        "name": "favoriteBar",
                        "in": "path",
                        "description": "ID of the FavoriteBar to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "example": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FavoriteBar deleted successfully"
                    },
                    "403": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthorised"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "FavoriteBar not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "FavoriteBar not found"
                                        },
                                        "errors": {
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/friends": {
            "get": {
                "tags": [
                    "Friends"
                ],
                "summary": "Récupérer la liste des amis de l'utilisateur actuel",
                "operationId": "getFriends",
                "responses": {
                    "200": {
                        "description": "Liste des amis de l'utilisateur actuel"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Friends"
                ],
                "summary": "Ajouter un ami",
                "operationId": "addFriend",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "friend_code": {
                                        "description": "Code ami de l'ami à ajouter",
                                        "type": "string",
                                        "example": "ABC12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ami ajouté avec succès"
                    },
                    "400": {
                        "description": "Erreur de validation ou ami déjà ajouté"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/friends/pending": {
            "get": {
                "tags": [
                    "Friends"
                ],
                "summary": "Récupérer la liste des amis en attente de confirmation",
                "operationId": "getPendingFriends",
                "responses": {
                    "200": {
                        "description": "Liste des amis en attente de confirmation"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        },
        "/api/friends/{friend}": {
            "put": {
                "tags": [
                    "Friends"
                ],
                "summary": "Mettre à jour l'état de l'ami (accepté ou non)",
                "operationId": "updateFriend",
                "parameters": [
                    {
                        "name": "friend",
                        "in": "path",
                        "description": "ID de l'ami à mettre à jour",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "accepted": {
                                        "description": "État de l'ami (0 pour non accepté, 1 pour accepté)",
                                        "type": "integer",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ami mis à jour avec succès"
                    },
                    "400": {
                        "description": "Erreur de validation ou droits insuffisants"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Friends"
                ],
                "summary": "Supprimer un ami",
                "operationId": "deleteFriend",
                "parameters": [
                    {
                        "name": "friend",
                        "in": "path",
                        "description": "ID de l'ami à supprimer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ami supprimé avec succès"
                    }
                },
                "security": [
                    {
                        "sanctum": []
                    }
                ]
            }
        }
    },
    "components": {
        "securitySchemes": {
            "sanctum": {
                "type": "apiKey",
                "description": "Enter token in format (Bearer <token>)",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Baratons",
            "description": "Operations about Baratons"
        },
        {
            "name": "FavoriteBars",
            "description": "Operations about FavoriteBars"
        }
    ]
}